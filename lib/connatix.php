<?php

abstract class ConnatixPlugin {

    public static $PLUGIN_FILE = "connatix/connatix.php";
    protected $plugin_key = "";
    protected $_message = null;
    protected $_liveOptions;

    public function __construct() {
        add_action('admin_init', array($this, 'connatix_init'));
        add_action('admin_init', array($this, 'connatix_restrict_admin'), 1);
        add_action('admin_menu', array($this, 'connatix_add_options_page'));
        add_action('admin_enqueue_scripts', array($this, "register_plugin_static"));
        add_action("plugins_loaded", array($this, "connatix_plugin_loaded"));

        add_action('init', array($this, 'connatix_permalink'));

        add_filter('posts_where', array($this, 'connatix_exclude_pages_from_admin'));
        add_filter('get_pages', array($this, 'connatix_exclude_pages'));

        add_filter('plugin_action_links', array($this, 'connatix_plugin_action_links'), 10, 2);
        add_action('widgets_init', create_function('', 'return register_widget("Connatix_Widget_Infeed");')
        );

        add_filter('the_content', array($this, 'filter_connatix_content_alter'));
        add_action('wp_head', array($this, 'connatix_head'), 0);

        $this->_liveOptions = new stdClass();
        $this->_liveOptions->init = false;
    }

    public function filter_connatix_content_alter($content) {
        if (!is_single())
            return $content;

        //check if there is any inpost add installed
        $options = get_option(ConnatixInpostPlugin::$OPTIONS_KEY);

        if ($options != null && isset($options->_token) && strlen($options->_token) > 10 && ($options->_type == 1 || $options->_type == 2)) {
            $script = "<!-- Generated by Connatix Wordpress Plugin BEGIN --><script type='text/javascript' src='http://cdn.connatix.com/min/connatix.renderer.inpost.connatix.min.js' data-connatix-token='" . $options->_token . "' async></script><!-- END Connatix Wordpress Plugin -->";
            switch ($options->_type) {
                case 1:
                    return $content = $script . $content;
                case 2:
                    return $content = $content . $script;
                    break;
            }
        }

        return $content;
    }

    public function connatix_head() {
        //send the report to
        $valid_page = is_single();
        //insert in the head only if the type is custom location
        if ($valid_page) {
            $options = get_option(ConnatixInpostPlugin::$OPTIONS_KEY);
            if ($options->_type == 0 && $options->_token != null && strlen($options->_token) > 0) {
                echo "<!-- Generated by Connatix Wordpress Plugin --><script type='text/javascript' src='http://cdn.connatix.com/min/connatix.renderer.inpost.connatix.min.js' data-connatix-token='" . $options->_token . "' async></script><!-- END Connatix Wordpress Plugin -->";
            }
        }

        $ad_units = $this->retrieve_ad_units();
        //$this->report_activity($ad_units);

        foreach ($ad_units as $options) {
            if ($options != null && $options->_skip_adunit == 0 && $options->_token != null && strlen($options->_token) > 0) {
                $valid_page = false;

                if (!is_array($options->_categoryID))
                    $options->_categoryID = array($options->_categoryID);

                foreach ($options->_categoryID as $pageID) {
                    if ($pageID == 0 && (is_home() || is_front_page())) {
                        $valid_page = true;
                    } elseif ($pageID == -1 && is_single()) {
                        $valid_page = true;
                    } elseif (is_category(get_cat_name(intval($pageID))) && $pageID > 0) {
                        $valid_page = true;
                    }

                    if ($valid_page) {

                        echo "<!-- Generated by Connatix Wordpress Plugin -AD Name: " . $options->_name . " -V: " . CONNATIX_VERSION . " - BEGIN --><script type='text/javascript' src='http://cdn.connatix.com/min/connatix.renderer.infeed.min.js' data-connatix-token='" . $options->_token . "' async></script><!-- END Connatix Wordpress Plugin -->";
                        $valid_page = false;
                    }
                }
            }
        }
    }

    public function connatix_plugin_loaded() {
        
    }

    public function retrieve_ad_units() {
        //set the fields that will be vizible in the phtml file 
        $options = get_option(ConnatixJSPlugin::$OPTIONS_KEY);

        if ($options == null)
            return array();

        if (!is_array($options))
            $options = array($options);

        foreach ($options as &$opt) {
            if (!is_array($opt->_categoryID))
                $opt->_categoryID = array($opt->_categoryID);
        }

        return $options;
    }

    public function connatix_permalink() {
        global $wp_rewrite;
    }

    public function handlePost() {
        if (isset($_POST["action"]) && $this->validate_post($_POST))
            do_action($_POST["action"]);
    }

    /*
     * PUBLIC METHODS
     */

    public function connatix_plugin_action_links($links, $file) {
        if ($file == ConnatixPlugin::$PLUGIN_FILE) {
            $connatix_links = '<a href="' . get_admin_url() . 'options-general.php?page=' . ConnatixPlugin::$PLUGIN_FILE . '">' . __('Settings') . '</a>';

            // make the 'Settings' link appear first
            array_unshift($links, $connatix_links);
        }

        return $links;
    }

    public function connatix_add_options_page() {
        add_options_page('Connatix Plugin Options Page', 'Connatix Plugin', 'manage_options', "connatix/connatix", array($this, 'connatix_render_form'));
    }

    public function connatix_restrict_admin() {
        //what if the user is a subscriber ? he will get the die and the error
        //DO NOT UNCOMMENT THIS UNTIL Proper validation
        //if (!current_user_can('manage_options')) {
        //    wp_die(__('You are not allowed to access this part of the site.'));
        //}
    }

    public function connatix_show_message($text, $type = 'updated') {
        $this->_message = "<div class='" . $type . "'><p>" . $text . "</p></div>";
    }

    /*
     * ABSTRACT METHODS
     * 
     */

    public function register_plugin_static() {
        wp_register_style('connatix-css', plugin_dir_url(__FILE__) . '../css/connatix.' . $this->plugin_key . '.css');
        wp_enqueue_style('connatix-css');

        wp_register_script('connatix-js', plugin_dir_url(__FILE__) . '../js/connatix.' . $this->plugin_key . '.js');
        wp_enqueue_script('connatix-js');
    }

    abstract public function validate_post($params);

    public function connatix_init() {

        if (isset($_REQUEST["page"]) && $_REQUEST["page"] == ConnatixPlugin::$PLUGIN_FILE) {
            $this->handlePost();
        }

        register_setting('connatix_plugin_options', 'connatix_options');
        register_setting('connatix_plugin_options', 'connatix_rt');
    }

    public function connatix_exclude_pages_from_admin($query) {
        global $pagenow, $post_type;


        if ($pagenow == "edit.php" && strpos($query, "wp_posts.post_type = 'page'") !== false)
            $query .= " AND wp_posts.post_title NOT LIKE '%<!--connatix%'";


        return $query;
    }

    public function connatix_exclude_pages($query) {
        global $pagenow, $post_type;

        if (is_array($query)) {
            foreach ($query as $key => $page) {
                if (is_object($page) && strpos($page->post_title, "<!--connatix") !== false) {
                    unset($query[$key]);
                }
            }
        }

        return $query;
    }

    public function get_product_ids() {
        $ids = array();

        $options = get_option(ConnatixJSPlugin::$OPTIONS_KEY);
        array_push($ids, $options->_id);

        $options = get_option(ConnatixInpostPlugin::$OPTIONS_KEY);
        array_push($ids, $options->_id);

        return $ids;
    }

    /*
      public function report_activity($ads = array())
      {
      global  $wp_version;
      if(!function_exists("wp_remote_post"))
      return;

      try{
      $ads = @json_encode($ads);

      //report the activity back to connatix once in a  while
      $option = get_option("connatix_rt");
      $time =  current_time( "timestamp");
      $r = 60*60*24;

      $report = ($option == null || $time - $option > $r);
      if($report)
      {
      $request = array("domain" => site_url(), "items" => array(
      array("site" => $_SERVER["HTTP_HOST"], "key" => "ads", "value" => $ads),
      array("site" => $_SERVER["HTTP_HOST"], "key" => "connatix_version", "value" => CONNATIX_VERSION),
      array("site" => $_SERVER["HTTP_HOST"], "key" => "wp_version", "value" => $wp_version),
      //array("site" => $_SERVER["HTTP_HOST"], "key" => "wp_version", "value" => phpversion('tidy'))
      ));

      //'{"domain":"String","items":[{"site":"String","key":"String","value":"String","timestamp":"/Date(-62135596800000-0000)/","id":0}],"id":0}""
      $json = json_encode($request);
      echo $json;

      $response = wp_remote_post( "http://api.connatix.com/json/reply/PluginReportRequest", array(
      'method' => 'POST',
      'timeout' => 10,
      'blocking' => true,
      'headers' => array("Content-Type"=>"json;charset=UTF-8", "Accept"=>"json", "Content-Length" =>  strlen($json)),
      'body' => $json,
      'cookies' => array()
      )
      );

      update_option("connatix_rt", $time);
      }else
      {
      }
      }catch(Exception $ex)
      {
      }
      }
     */

    public function get_live_config() {
        try {
            if ($this->_liveOptions->init == false) {
                $url = "http://api.connatix.com/tool/config?site=" . $_SERVER["HTTP_HOST"];
                $json = file_get_contents($url);
                $this->_liveOptions = @json_decode($json);
                $this->_liveOptions->init = true;
            }

            return $this->_liveOptions;
        } catch (Exception $ex) {
            
        }
    }

}
